#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'logger'
require_relative 'lib/vultr'
require_relative 'lib/exoscale'
require_relative 'lib/name'
require_relative 'lib/digitalocean'
require_relative 'lib/dockerhandler'
require_relative 'lib/synchandler'

log = Logger.new(STDOUT)

options = {}
opts = OptionParser.new do |opts|

  opts.banner = 'Usage: bee2 [-v] [-h|--help] [-c <config>] [-p [-r]] [-d COMMAND]'

  opts.on('-c','--config CONFIG','Configuration File') do |config|
    options[:config] = config
  end

  opts.on('-p', '--provision', 'Provision Servers') do |provision|
    options[:provision] = provision
  end

  opts.on('-d', '--docker COMMAND', 'Docker Command (use command \'help\' for more information)') do |docker|
    options[:docker] = docker
  end

  opts.on('-v', '--verbose', 'Debug Logging Output Enabled') do |verbose|
    if verbose
      log.level = Logger::DEBUG
    end
  end

  opts.on('-r','--rebuild','Destroy and Rebuild Servers During Provisioning') do |rebuild|
    options[:rebuild] = rebuild
  end

  opts.on('-a', '--ansible INVENTORY', 'Run Ansible on (public|private)[:server].') do |inventory|
    cmd = inventory.split(':')
    options[:inventory] = cmd[0]
    if not cmd[1].nil?
      options[:server] = cmd[1]
    end
  end

  opts.on('-s', '--sync SERVERS', 'Sync data between host and server') do |srv|
    options[:sync] = srv
  end

  opts.on_tail("-h", "--help", "Show this message") do
    STDERR.puts opts
    exit
  end
end

begin opts.parse! ARGV
rescue *[OptionParser::InvalidOption,OptionParser::InvalidArgument,OptionParser::MissingArgument] => e
  STDERR.puts e
  STDERR.puts opts
  exit 1
end

if options[:config].nil?
  log.fatal('You must specify a config file (-c). Use -h for usage.')
  exit 1
end

config = YAML.load_file(options[:config])
case config['provisioner']['type']
when 'vultr'
  p = VultrProvisioner.new(config, log)
when 'exoscale'
  p = ExoscaleProvisioner.new(config, log)
when 'digitalocean'
  p = DigitalOceanProvisioner.new(config, log)
when 'name'
  p = NameProvisioner.new(config, log)
end

if options[:provision]
  if options[:rebuild]
    puts 'WARNING: Rebuilding will destroy existing servers. Do you wish to contine? [Type: YES]'
    if gets.chomp != 'YES'
      puts 'Rebuild aborted'
      exit 5
    end
  end
  p.provision(rebuild = options[:rebuild])
end


if options[:inventory]
  inv_file = config['inventory'][options[:inventory].to_s]

  playbooks = config['servers'].flat_map { |server, info| {server => info['playbook']} }.inject(:update)
  log.info("Running Ansible (Inventory: #{options[:inventory]} :: #{inv_file})")
  playbooks.each { |server, playbook|
    # if not hosts.empty? and not hosts.split(',').include?(server)
    #   next
    # end
    next if not options[:server].nil? and options[:server] != server

    log.info("Applying #{playbook} to #{server}")
    cmd = ['ansible-playbook', '--limit', server, '--key-file', config['provisioner']['ssh_key']['private'],
           '-u', 'root', '-e', "config_file=#{options[:config].to_s}", '-i', inv_file,
           "ansible/ssh-hostkey-check.yml", "ansible/#{playbook}"]
    log.debug(cmd)
    Process.fork do
      exec(*cmd)
    end
    Process.wait
  }
end

if options[:sync]
  SyncHandler.new(config, log, options[:sync])
end

if options[:docker]
  docker = DockerHandler.new(config, log, options[:docker], PassStore.new(config))
end
